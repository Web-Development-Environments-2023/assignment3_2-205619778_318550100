openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
paths:
  /Login:
    post:
      tags:
        - Auth
      summary: User exist in DB and want to log in
      description: Check if the user exist, if not throw error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        description: Inventory Iteam to add
      responses:
        '200':
          description: User exist 
        '400':
          description: Wrong Input parameter
          
  /Register:
    post:
      tags:
        - Auth
      summary: A new user from Client is added to Server
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Inventory Iteam to add
      responses:
        '201':
          description: A new user has been added
        '400':
          description: Wrong Input parameter
          
  /Logout:
    post:
      tags:
        - Auth
      summary: The user from the client logout from the server
      description: A message logout succeeded.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Inventory item to add
      responses:
        '201':
          description: The user logout
        '400':
          description: something happend 
          
  /recipes/random:
    get:
      tags:
      - Recipes
      summary: get a list of 3 recipes from the recipes API
      description: A json object contains all the details about the recipes

      responses:
        '200':
          description: A list of a recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: bad input parameter
        
  /recipes/{recipeId}:
    get:
      tags:
      - Recipes
      summary: get a detail of recipe
      description: A json object contains the preview details about this recipe
      parameters: 
       - name: recipeId
         description: Recipes id
         in: path
         required: true
         schema:
          type: string
      responses:
        '200':
          description: A detail of a recipe
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailRecipe'
        '400':
          description: bad input parameter
          
  /recipes/search:
    get:
      tags:
      - Recipes
      summary: get a detail of recipes that the user search
      description: A json object contains details about the recipes
      parameters:
        - in: query
          name: query
          description: Recipes name that the user want to search, the user can filter by cuisine, diet and intolerance
          required: true
          schema:
            type: string
        - in: query
          name: number
          description: number of recipes to show after the search, the options are 5 10 15 and the default value is 5
          required: false
          schema:
            type: integer
            minimum: 5
        - in: query
          name: diet
          description: list of categories diet that the user can filter by them
          required: false
          schema:
            type: string
        - in: query
          name: cuisine
          description: list of categories cuisine that the user can filter by them
          required: false
          schema:
            type: string 
        - in: query
          name: intolerance
          description: list of categories intolerance that the user can filter by them
          required: false
          schema:
            type: string
        - in: query
          name: sort
          description: the sort method
          required: false
          schema:
            type: string           
      responses:
        '200':
          description: A list of a recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailRecipe'
        '400':
          description: bad input parameter 

          
  /recipes/RecipeDetailsAPI/{recipe_id}:
    get:
      tags:
      - Recipes
      summary: get a full details of recipe in the spooncular API
      description: A json object contains all the details about this recipe
      parameters: 
       - name: recipe_id
         description: Recipes id
         in: path
         required: true
         schema:
          type: string
      responses:
        '200':
          description: A full details of a recipe in the spooncular API
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailRecipe'
        '400':
          description: bad input parameter     
    
           
  /users/RecipeDetailsDB/{recipe_id}:
    get:
      tags:
      - Users
      summary: get a full details of recipe in the DB
      description: A json object contains all the details about this recipe
      parameters: 
       - name: recipe_id
         description: Recipes id
         in: path
         required: true
         schema:
          type: string
      responses:
        '200':
          description: A full details of a recipe in the DB
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailRecipe'
        '400':
          description: bad input parameter

  /users/CreateRecipe: 
    get:
      tags:
      - Users
      summary: get a the details of recipe that the user created
      description: A json object contains all the details about this recipe

      responses:
        '200':
          description: A the details of a recipe that the user created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailRecipe'
        '400':
          description: bad input parameter  

    post:
      tags:
        - Users
      summary: the user can create a new recipe
      description: A json object contains details about the new recipe.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailRecipe'
        description: Inventory item to add
      responses:
        '201':
          description: A new recipe has been added
        '400':
          description: wrong input parameter    
          
  /users/familyRecipes:
    get:
      tags:
      - Users
      summary: get a detail of user's family recipes
      description: A json object contains all the details about recipes of the user's family

      responses:
        '200':
          description: A detail of a user's family recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: bad input parameter

          
  /users/favorites:
    get:
      tags:
      - Users
      summary: get a detail of user's favorite recipes
      description: A json object contains all the details about favorite recipes

      responses:
        '200':
          description: A detail of a user's favorite recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: bad input parameter

    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: integer
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        '201':
          description: A new recipe has been added to favorite
        '400':
          description: wrong input parameter   
    
  /users/lastWatchedRecipes:
    get:
      tags:
      - Users
      summary: gets body with recipeId and save this recipe in the last watched list of the logged-in user
      description: A json object contains all the details about last wached recipes
      responses:
        '200':
          description: A detail of a user's last watched recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: bad input parameter

    post:
      tags:
        - Users
      summary: returns the last watched recipes that were saved by the logged-in user
      description: The recipes enter to the last watched recipes of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
        description: Inventory item to add
      responses:
        '201':
          description: A new recipe has been added to last wached 
        '400':
          description: wrong input parameter  
          
          
  /users/search:
    get:
      tags:
      - Users
      summary: get a detail of recipes that the user search
      description: A json object contains details about the recipes include the last search (if exist)
      parameters:
        - in: query
          name: Recipes name
          description: Recipes name that the user want to search, the user can filter by cuisine, diet and 
          required: true
          schema:
            type: string
        - in: query
          name: number of recipes
          description: number of recipes to show after the search, the options are 5 10 15 and the default value is 5
          required: false
          schema:
            type: integer
            format: int32
            minimum: 5
        - in: query
          name: Recipes diet
          description: list of categories diet that the user can filter by them
          required: false
          schema:
            type: string
        - in: query
          name: Recipes cuisine
          description: list of categories cuisine that the user can filter by them
          required: false
          schema:
            type: string 
        - in: query
          name: Recipes intolerance
          description: list of categories intolerance that the user can filter by them
          required: false
          schema:
            type: string            
      responses:
        '200':
          description: A list of a recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailRecipe'
        '400':
          description: bad input parameter 
      
components:
  schemas:
    Login:
      type: object
      description: Model containing user info
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username contains between 3 to 8 letter only
          example: maorbtn
        password:
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: >
            password contains between 5 to 10 chars,
            at least one of them is number and spatial char
          example: maor@123

    User:
      type: object
      description: Model containing user info
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username contains between 3 to 8 letter only
          example: maorbtn
        firstame:
          type: string
          description: first name of user
          example: Maor
        lastname:
          type: string
          description: last name of user
          example: Biton
        country:
          type: string
          description: user's country
          example: Israel
        password:
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: >
            password contains between 5 to 10 chars,
            at least one of them is number and spatial char
          example: maor@123
        password confirmation :
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: >
            password need to be equal to first password
          example: maor@123
        email:
          type: string
          format: email
          description: user's email
          example: maorbtn@post.bgu.ac.il

    Recipe:
      type: object
      description: Model containing recipe info
      properties:
        image:
          type: string
          format: URL
          description: URL for the recipe's image
          example: https://img.mako.co.il/2018/05/07/IMG_2683_i.jpg
        title:
          type: string
          description: name of recipe
          example: Cherry mousse cake
        readyInMinutes:
          type: number
          description: time to prepare the food
          example: 60
        aggregateLikes:
          type: number
          description: num of the likes
          example: 102
        vegav/vegetarian:
          type: boolean
          description: Vegan or not
          example: False
        vegetarian:
          type: boolean
          description: vegetarian ot not
          example: True
        glutenFree:
          type: boolean
          description: True if gluten is free
          example: true
        
    DetailRecipe:
      type: object
      description: Model containing recipe info
      properties:
        image:
          type: string
          format: URL
          description: URL for the recipe's image
          example: https://img.mako.co.il/2018/05/07/IMG_2683_i.jpg
        title:
          type: string
          description: name of recipe
          example: Cherry mousse cake
        readyInMinutes:
          type: number
          description: time to prepare the food
          example: 60
        aggregateLikes:
          type: number
          description: num of the likes
          example: 102
        vegav/vegetarian:
          type: boolean
          description: Vegan or not
          example: False
        vegetarian:
          type: boolean
          description: vegetarian ot not
          example: True
        glutenFree:
          type: boolean
          description: True if gluten is free
          example: true
        ingredients:
          type: string
          description: list of json of ingredients and quantity of the recipe
          example:
                  - amount: 2
                    name: cherry
                  - amount: 1
                    name: milk
        instructions:
          type: string
          description: instructions how to make the recipe
          example: Soak the gelatin in water for 10 minutes. In a small pot, cook the raspberry and lychee purees with the eggs, sugar and butter up to 82 degrees. Add the gelatin, mix until it melts and transfer to a round ring. Freezers.
        servings:
          type: integer
          description: number of serving
          example: 6